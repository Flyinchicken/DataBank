// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// ---------------- Auth ----------------
type ConfirmEmailInfo {
  expiryAt         DateTime
  attemptsMade     Int      @default(0)
  confirmEmailCode Int
}

// ---------------- User ----------------
model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  email String @unique()

  firstName String

  lastName String

  hashedPassword String

  role UserRole @default(STANDARD)

  createdAt DateTime @default(now()) @db.Date

  confirmEmailInfo ConfirmEmailInfo?

  // /** The timestamp when the user confirmed their email */
  confirmedAt DateTime?

  verifiedAt DateTime?
  dataset    Dataset[] @relation(fields: [datasetId], references: [id])
  datasetId  String[]  @db.ObjectId
  Project    Project[] @relation(fields: [projectId], references: [id])
  projectId  String[]  @db.ObjectId
}

enum UserRole {
  ADMIN
  STANDARD
}

// ---------------- Dataset ----------------
model Dataset {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String?
  createdAt      DateTime       @default(now()) @db.Date
  updatedAt      DateTime       @default(now()) @db.Date
  license        DatasetLicense @default(PUBLIC)
  managers       User[]         @relation(fields: [managerIds], references: [id])
  managerIds     String[]       @db.ObjectId
  datasetType    DatasetType
  // need to make adjustment for this property
  // initially set to "false", when the dataset is validated the managers can set this value to true
  isReadyToShare Boolean
  tabularData    TabularData?
  // binaryData       BinaryData?
}

enum DatasetLicense {
  PUBLIC
  OTHER
}

enum DatasetType {
  BASE
  TABULAR
  BINARY
}

// type BinaryData {
//   // to-do
// }

// Tabular dataset
model TabularData {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  // should be keys in the data object
  primaryKeys String[]
  columns     TabularColumn[]
  dataset     Dataset         @relation(fields: [datasetId], references: [id], onDelete: Cascade)
  datasetId   String          @unique @db.ObjectId
}

model TabularColumn {
  id                       String                    @id @default(auto()) @map("_id") @db.ObjectId
  name                     String
  description              String?
  type                     ColumnType
  nullable                 Boolean
  summaryPermission        PermissionLevel
  summary                  ColumnSummary
  dataPermission           PermissionLevel
  tabularData              TabularData               @relation(fields: [tabularDataId], references: [id], onDelete: Cascade)
  tabularDataId            String                    @unique @db.ObjectId()
  // store the actual data in a pl.series(array) depending on the type of the column
  stringData               String[]
  intData                  Int[]
  floatData                Float[]
  enumData                 String[]
  datetimeData             DateTime[]
  booleanData              Boolean[]
  // column validation
  stringColumnValidation   StringColumnValidation?
  numericColumnValidation  NumericColumnValidation?
  enumColumnValidation     EnumColumnValidation?
  datetimeColumnValidation DatetimeColumnValidation?
}

enum ColumnType {
  BOOLEAN
  STRING
  INT
  FLOAT
  ENUM
  DATETIME
}

enum PermissionLevel {
  PUBLIC
  LOGIN
  VERIFIED
  MANAGER
}

// column summary
type ColumnSummary {
  count           Int
  notNullCount    Int
  intSummary      IntColumnSummary?
  floatSummary    FloatColumnSummary?
  enumSummary     EnumColumnSummary?
  datetimeSummary DateTimeColumnSummary?
}

type IntColumnSummary {
  max    Int
  min    Int
  mean   Float
  median Float
  mode   Int
  std    Float
}

type FloatColumnSummary {
  max    Float
  min    Float
  mean   Float
  median Float
  std    Float
}

type EnumColumnSummary {
  distribution Json
}

type DateTimeColumnSummary {
  max DateTime
  min DateTime
}

// column validation
type StringColumnValidation {
  minLength Int?
  maxLength Int?
  regex     String?
}

type NumericColumnValidation {
  min Float?
  max Float?
}

type EnumColumnValidation {
  allowedValues String[]
}

type DatetimeColumnValidation {
  min DateTime?
  max DateTime?
}

// ---------------- Setup ----------------
model Setup {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  createdAt        DateTime         @default(now()) @db.Date
  updatedAt        DateTime         @default(now()) @db.Date
  userVerification UserVerification
}

type UserVerification {
  method     VerificationMethod
  emailRegex String?
}

enum VerificationMethod {
  MANUAL
  CONFIRM_EMAIL
  REGEX_EMAIL
}

// ---------------- Projects ----------------
model Project {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  externalId  String?
  description String?
  users       User[]   @relation(fields: [userIds], references: [id])
  userIds     String[] @db.ObjectId
  expiry      DateTime
  // projectDatasets    ProjectDataset[]
}

// type ProjectDataset {
//   dataset Dataset
//   filters
//   transformationOnColumns
// }
